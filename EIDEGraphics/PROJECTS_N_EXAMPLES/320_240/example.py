# -*- coding: utf-8 -*-

#################### Test ######################
# Este codigo es un remedo de lo que ser√≠a el de 'calculo' del usuario

import time, random


matriz = [
[0.00, 9.85, 19.10, 27.80, 35.98, 43.67, 50.89, 57.69, 64.07, 70.07, 75.71, 81.02, 86.00, 90.69, 95.09, 99.23, 103.13, 106.79, 110.22, 113.46, 116.50, 119.35, 122.04, 124.56, 126.93, 129.16, 131.26, 133.23, 135.08, 136.82, 138.46, 140.00],
[0.00, 9.85, 19.10, 27.80, 17.99, 21.83, 25.45, 28.84, 32.04, 23.36, 25.24, 27.01, 28.67, 30.23, 23.77, 24.81, 25.78, 26.70, 27.56, 28.36, 29.12, 29.84, 30.51, 31.14, 31.73, 25.83, 26.25, 26.65, 27.02, 27.36, 27.69, 28.00],
[100.00, 99.00, 98.00, 97.00, 96.00, 95.00, 94.00, 93.00, 92.00, 91.00, 90.00, 89.00, 88.00, 87.00, 86.00, 85.00, 84.00, 83.00, 82.00, 81.00, 80.00, 79.00, 78.00, 77.00, 76.00, 75.00, 74.00, 73.00, 72.00, 71.00, 70.00, 69.00],
[100.00, 98.50, 97.00, 95.50, 94.00, 92.50, 91.00, 89.50, 88.00, 86.50, 85.00, 83.50, 82.00, 80.50, 79.00, 77.50, 76.00, 74.50, 73.00, 71.50, 70.00, 68.50, 67.00, 65.50, 64.00, 62.50, 61.00, 59.50, 58.00, 56.50, 55.00, 53.50],
[60.00, 61.20, 62.40, 63.60, 64.80, 66.00, 67.20, 68.40, 69.60, 70.80, 72.00, 73.20, 74.40, 75.60, 76.80, 78.00, 79.20, 80.40, 81.60, 82.80, 84.00, 85.20, 86.40, 87.60, 88.80, 90.00, 91.20, 92.40, 93.60, 94.80, 96.00, 97.20],
[0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
[0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
[0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
]


def simulacion():
    AEIDEG =[0,0,0,0,0,0,0,0]
    periodo = 64
    amplitud = 1
    semiPeriodo = periodo / 2.0
    miTiempo = time.clock() * (1/float(semiPeriodo))
    uno = int(miTiempo % 2)
    if uno:
        rampa = (miTiempo - int(miTiempo) ) * amplitud
    else:
        rampa = amplitud - ((miTiempo - int(miTiempo) ) * amplitud)

    dienteSierra = miTiempo - int(miTiempo)


    indice = int((dienteSierra*32)%32) 
    for i in range (0,8):
        try:
            AEIDEG[i] = matriz[i][indice]
        except IndexError:
            print (i, indice)

    return AEIDEG
